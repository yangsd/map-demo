
logging.config=classpath:logback.xml
# location of config file (default classpath:logback.xml for logback)
#logging.level.*= 
# levels for loggers, e.g. "logging.level.org.springframework=DEBUG" (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging.level.org.springframework=INFO
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
#log4j.logger.org.hibernate=DEBUG



# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.port=80

#配置错误的提示
error.whitelabel.enabled=true


# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# http://docs.spring.io/spring-boot/docs/1.1.8.RELEASE/reference/htmlsingle/#boot-features-connect-to-production-database
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/map_demo?useUnicode=true&characterEncoding=utf8
spring.datasource.username=root
spring.datasource.password=mysql
spring.datasource.driverClassName=com.mysql.jdbc.Driver

### below config instruction please refer to TomcatDataSourceConfiguration.java

### if config maxActive=1000 on my local: (even i config as mysqld as 1910), will happpen below ex:
##com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: 
####The driver was unable to create a connection due to an inability to establish the client portion of a socket.
spring.datasource.maxActive=10

##spring.datasource.maxIdle=8
spring.datasource.minIdle=10
spring.datasource.initialSize=5
spring.datasource.validationQuery=SELECT 1;
spring.datasource.testOnBorrow=true
spring.datasource.testOnReturn=false
spring.datasource.testWhileIdle=true
spring.datasource.timeBetweenEvictionRunsMillis=30000
spring.datasource.minEvictableIdleTimeMillis=30000
##spring.datasource.max-wait=
############ tomcat jdbc pool specified config start #############
spring.datasource.jmxEnabled=true
spring.datasource.validationInterval=30000
spring.datasource.logAbandoned=false
spring.datasource.removeAbandoned=true
spring.datasource.removeAbandonedTimeout=60
spring.datasource.jdbcInterceptors=org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer
############ tomcat jdbc pool specified config end #############


### Configure JPA properties
###Spring Data JPA already provides some vendor-independent configuration options 
###(e.g. for SQL logging) and Spring Boot exposes those, and a few more for hibernate as external 
###configuration properties. The most common options to set are:
###spring.jpa.hibernate.ddl-auto: create-drop
###spring.jpa.hibernate.naming_strategy: org.hibernate.cfg.ImprovedNamingStrategy
###spring.jpa.database: H2	|||	true false
spring.jpa.show-sql=false

spring.jpa.hibernate.ddl-auto=update
